package com.vikadata.api.space.controller;

import java.util.Collections;

import javax.annotation.Resource;
import javax.validation.Valid;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

import com.vikadata.api.interfaces.social.facade.SocialServiceFacade;
import com.vikadata.api.shared.component.scanner.annotation.ApiResource;
import com.vikadata.api.shared.component.scanner.annotation.GetResource;
import com.vikadata.api.shared.component.notification.annotation.Notification;
import com.vikadata.api.shared.component.scanner.annotation.PostResource;
import com.vikadata.api.shared.cache.service.UserSpaceCacheService;
import com.vikadata.api.shared.component.notification.NotificationTemplateId;
import com.vikadata.api.shared.constants.ParamsConstants;
import com.vikadata.api.shared.context.LoginContext;
import com.vikadata.api.shared.context.SessionContext;
import com.vikadata.api.space.ro.SpaceMainAdminChangeOpRo;
import com.vikadata.api.space.vo.MainAdminInfoVo;
import com.vikadata.api.organization.mapper.MemberMapper;
import com.vikadata.api.space.enums.SpaceUpdateOperate;
import com.vikadata.api.space.service.ISpaceInviteLinkService;
import com.vikadata.api.space.service.ISpaceService;
import com.vikadata.core.support.ResponseData;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Api(tags = "Space - Main Admin Api")
@ApiResource(path = "/space")
public class SpaceMainAdminController {

    @Resource
    private ISpaceService iSpaceService;

    @Resource
    private MemberMapper memberMapper;

    @Resource
    private UserSpaceCacheService userSpaceCacheService;

    @Resource
    private ISpaceInviteLinkService iSpaceInviteLinkService;

    @Resource
    private SocialServiceFacade socialServiceFacade;

    @GetResource(path = "/manager")
    @ApiOperation(value = "Get main admin info")
    @ApiImplicitParam(name = ParamsConstants.SPACE_ID, value = "space id", required = true, dataTypeClass = String.class, paramType = "header", example = "spcyQkKp9XJEl")
    public ResponseData<MainAdminInfoVo> getMainAdminInfo() {
        String spaceId = LoginContext.me().getSpaceId();
        MainAdminInfoVo vo = memberMapper.selectAdminInfoBySpaceId(spaceId);
        return ResponseData.success(vo);
    }

    @Notification(templateId = NotificationTemplateId.SPACE_ADD_PRIMARY_ADMIN)
    @PostResource(path = "/changeManager", tags = "UPDATE_MAIN_ADMIN")
    @ApiOperation(value = "Change main admin")
    @ApiImplicitParam(name = ParamsConstants.SPACE_ID, value = "space id", required = true, dataTypeClass = String.class, paramType = "header", example = "spcyQkKp9XJEl")
    public ResponseData<Void> replace(@RequestBody @Valid SpaceMainAdminChangeOpRo opRo) {
        Long userId = SessionContext.getUserId();
        Long memberId = LoginContext.me().getMemberId();
        String spaceId = LoginContext.me().getSpaceId();
        socialServiceFacade.checkWhetherSpaceCanChangeMainAdmin(spaceId, memberId, opRo.getMemberId(), Collections.singletonList(SpaceUpdateOperate.UPDATE_MAIN_ADMIN));
        Long id = iSpaceService.changeMainAdmin(spaceId, opRo.getMemberId());
        // When the function of inviting all members of the space is turned off,
        // all public invitation links generated by the original main administrator become invalid.
        iSpaceInviteLinkService.delByMemberIdIfNotInvite(spaceId, memberId);
        // delete the relevant cache
        userSpaceCacheService.delete(userId, spaceId);
        userSpaceCacheService.delete(id, spaceId);
        return ResponseData.success();
    }
}
